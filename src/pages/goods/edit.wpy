<template>
  <Tips />
  <view class="container" wx:if="{{init}}">


    <!--照片上传区域-->
    <ImageUploader :pictures.sync="pictures" />

    <!-- 编码区域 -->
    <view class="weui-cells-form">
      <view class="weui-cell weui-cell__input weui-cell__vcode">
        <view class="weui-cell__hd">
            <view class="weui-label">商品编码</view>
        </view>
        <view class="weui-cell__bd">
          <input class="weui-input" id="pid" disabled="{{mode === 'edit'}}" value="{{input.pid}}" placeholder="请输入7位商品编码"  maxlength="7" type="number" @input="input" />
        </view>
        <view @tap="scanCode" class="weui-cell__ft">
          <image class="weui-vcode-img" style="width: 45px;" src="../../images/icons/barcode.png"/>
        </view>
      </view>
    </view>

    <!-- 商品特征，用于自动生成商品名称 -->
    <view class="weui-cells-form">
      <view class="weui-cell weui-cell__input weui-cell__vcode">
        <view class="weui-cell__hd">
            <view class="weui-label">商品特征</view>
        </view>
        <view class="weui-cell__bd">
          <input class="weui-input" id="feat" value="{{input.feat}}" placeholder="请输入商品特征" @input="input" />
        </view>
      </view>
    </view>

    <!-- 商品名称区域 -->
    <view class="weui-cells-form">
      <view class="weui-cell">
        <view class="weui-cell__bd">
          <!-- <input class="weui-textarea" id="name" value="{{input.name}}" placeholder="请输入商品标题" style="height: 2.3em" maxlength="30" @input="inputUpper"/> -->
          <input class="weui-textarea" id="name" value="{{autoTitle}}" placeholder="自动生成商品名称" disabled style="height: 2.3em" maxlength="30"/>
          <view class="weui-textarea-counter">{{autoTitle ? autoTitle.length : 0}}/30</view>
        </view>
      </view>
    </view>

    <!-- SKU 列表 -->
    <SkuList :skuList.sync="skuList" :isSamePrice.sync="isSamePrice" :isOnePrice.sync="isOnePrice" />

    <!-- 其他详细信息 -->
     <view class="detail-box">
      <view class="weui-cells-form">

        <view class="weui-cell"  id="isBrandDisplay" @tap="showInner">
          <view class="weui-cell__hd">
            <view class="weui-label">商品品牌</view>
          </view>
          <view class="weui-cell__bd" style="color: {{input.brand ? 'default' : 'grey'}};">
            {{input.brand ? input.brand : '未选择'}}
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </view>

        <view class="weui-cell"  id="isCateDisplay" @tap="showInner">
          <view class="weui-cell__hd">
            <view class="weui-label">商品分类</view>
          </view>
          <view class="weui-cell__bd" style="color: {{input.cate ? 'default' : 'grey'}};" >
            {{input.cate ? input.cate : '未选择'}}
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </view>

        <view class="weui-cell"  id="isSupplierDisplay" @tap="showInner">
          <view class="weui-cell__hd">
            <view class="weui-label">供应商</view>
          </view>
          <view class="weui-cell__bd" style="color: {{input.supplier ? 'default' : 'grey'}};" >
            {{input.supplier ? input.supplier : '未选择'}}
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </view>

<!--         <view class="weui-cell"  @tap="details">
          <view class="weui-cell__hd">
            <view class="weui-label">商品详情</view>
          </view>
          <view class="weui-cell__bd">
            {{detailText}}
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </view>
 -->
        <view class="weui-cell weui-cell_switch">
          <view class="weui-cell__bd">所有规格同价</view>
          <view class="weui-cell__ft">
            <switch checked="{{isSamePrice}}" id="isSamePrice" @change="samePrice" />
          </view>
        </view>
        <view class="weui-cell weui-cell_switch">
          <view class="weui-cell__bd">一口价</view>
          <view class="weui-cell__ft">
            <switch checked="{{isOnePrice}}" id="isOnePrice" @change="onePrice" />
          </view>
        </view>
      </view>
    </view>


    <!--操作栏-->
    <ActionBar @tap.user="submit" />
  </view>

  <!-- 品牌 -->
  <!-- 注意这里 selectInner 是否需要修改 -->
  <!-- <SliderPanelBrand btn='false'> -->
  <SliderPanelBrand :display.sync="isBrandDisplay" btn='false'>
    <view slot="title">商品品牌</view>
    <view slot="content" class="weui-cells-form">
      <radio-group id="brand" key="" @change="radio" @tap="selectInner">
        <label class="weui-cell weui-check__label" wx:for="{{brands}}" wx:key="value">
          <radio class="weui-check" value="{{item.name}}" checked="{{input.brand == item.name}}"/>
          <view class="weui-cell__bd">{{item.name}}</view>
          <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{input.brand == item.name}}">
            <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
          </view>
        </label>
      </radio-group>

      <!-- 新增分类 -->
      <view class="weui-cell weui-cell_input weui-cell_vcode">
        <view class="weui-cell__hd">
          <view class="weui-label"> + 新增品牌</view>
        </view>
        <view class="weui-cell__bd">
          <input class="weui-input" id="newInner" value="{{input.newInner}}" @input="inputUpper" placeholder="输入品牌名称" />
        </view>
        <view class="weui-cell__ft">
          <view id="brands" class="weui-vcode-btn" @tap="addInner('Brand')">确定</view>
        </view>
      </view>
    </view>
  </SliderPanelBrand>

  <!-- 分类 -->
  <SliderPanelCate :display.sync="isCateDisplay" btn='false'>
    <view slot="title">商品分类</view>
    <view slot="content" class="weui-cells-form">
      <!-- 注意这里 selectInner 是否需要修改 -->
      <radio-group id="cate" key="" @change="radio" @tap="selectInner">
        <label class="weui-cell weui-check__label" wx:for="{{cates}}" wx:key="value">
          <radio class="weui-check" value="{{item.name}}" checked="{{input.cate == item.name}}"/>
          <view class="weui-cell__bd">{{item.name}}</view>
          <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{input.cate == item.name}}">
            <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
          </view>
        </label>
      </radio-group>

      <!-- 新增分类 -->
      <view class="weui-cell weui-cell_input weui-cell_vcode">
        <view class="weui-cell__hd">
          <view class="weui-label"> + 新增分类</view>
        </view>
        <view class="weui-cell__bd">
          <input class="weui-input" id="newInner" value="{{input.newInner}}" @input="inputUpper" placeholder="输入分类名称" />
        </view>
        <view class="weui-cell__ft">
          <view id="cates" class="weui-vcode-btn" @tap="addInner('Cate')">确定</view>
        </view>
      </view>
    </view>
  </SliderPanelCate>

  <!-- 供应商选择框 -->
  <SliderPanelSupplier :display.sync="isSupplierDisplay" btn='false'>
    <view slot="title">供应商</view>
    <view slot="content" class="weui-cells-form">
      <radio-group id="supplier" key="" @change="radio" @tap="selectInner">
        <label class="weui-cell weui-check__label" wx:for="{{suppliers}}" wx:key="value">
          <radio class="weui-check" value="{{item.name}}" checked="{{input.supplier == item.name}}"/>
          <view class="weui-cell__bd">{{item.name}}</view>
          <view class="weui-cell__ft weui-cell__ft_in-radio" wx:if="{{input.supplier == item.name}}">
            <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
          </view>
        </label>
      </radio-group>

      <!-- 新增供应商 -->
      <view class="weui-cell weui-cell_input weui-cell_vcode">
        <view class="weui-cell__hd">
          <view class="weui-label"> + 新增供应商</view>
        </view>
        <view class="weui-cell__bd">
          <input class="weui-input" id="newInner" value="{{input.newInner}}" @input="inputUpper" placeholder="输入分类名称" />
        </view>
        <view class="weui-cell__ft">
          <view id="suppliers" class="weui-vcode-btn" @tap="addInner('Supplier')">确定</view>
        </view>
      </view>
    </view>
  </SliderPanelSupplier>

  <!-- SKU 标准尺寸 -->
  <SliderPanelSize :display.sync="isSizeDisplay" btn='false'>
    <view slot="title">标准尺寸</view>
    <view slot="content" class="weui-cells-form">
      <!-- 注意这里 selectInner 是否需要修改 -->
      <radio-group id="size1" key="" @change="skuRadio({{editingInfo}})" @tap="selectInner">
        <label class="weui-cell weui-check__label" wx:for="{{sizes}}" wx:key="value">
          <radio class="weui-check" value="{{item.name}}"/>
          <view class="weui-cell__bd">{{item.name}}</view>
        </label>
      </radio-group>
    </view>
  </SliderPanelSize>

  <!-- SKU 颜色 -->
  <SliderPanelColor :display.sync="isColorDisplay" btn='false'>
    <view slot="title">颜色</view>
    <view slot="content" class="weui-cells-form">
      <!-- 注意这里 selectInner 是否需要修改 -->
      <radio-group id="color" key="" @change="skuRadio({{editingInfo}})" @tap="selectInner">
        <label class="weui-cell weui-check__label flex-color" wx:for="{{colors}}" wx:key="value">
          <radio class="weui-check" value="{{item.name}}"/>
          <view class="weui-cell__bd flex-color-name">{{item.name}}</view>
          <view class="weui-cell__bd flex-color-sample" style="background: {{item.nameEn === 'multicolor' ? 'linear-gradient(to right,  red 0%,green 30%,blue 60%, yellow 100%)' : item.nameEn}};">{{item.nameEn}}</view>
        </label>
      </radio-group>
    </view>
  </SliderPanelColor>
</template>

<script>
  import wepy from 'wepy';
  import base from '../../mixins/base';
  import input from '../../mixins/input';
  import goods from '../../api/goods';
  import SkuList from '../../components/goods/sku_list';
  import ImageUploader from '../../components/goods/image_uploader';
  import Tips from '../../utils/Tips';
  import Event from '../../utils/Event';
  import FormTips from '../../components/weui/tips';
  import ActionBar from '../../components/common/action_bar';
  import SliderPanel from '../../components/common/slider_panel';
  import AV from '../../utils/av-weapp-min';

  export default class GoodsEdit extends wepy.page {
    def = {
      input: {
        status: true,
        pid: '',
        feat: '',
        name: '',
        cate: '',
        brand: '',
        supplier: ''
      },
      details: [],
      pictures: [],
      skuList: [{
        size1: '',
        size2: '',
        color: '',
        price1: null,
        price2: null,
        price3: null,
        stock: null,
        soldOut: false
      }],
      mode: 'create',
      isSamePrice: true,
      isOnePrice: false,
      cates: [],
      brands: [],
      suppliers: [],
      sizes: [],
      colors: [],
      init: false,
      isCateDisplay: 'false',
      isBrandDisplay: 'false',
      isSupplierDisplay: 'false',
      isSizeDisplay: 'false',
      isColorDisplay: 'false',
      editingInfo: {},
      autoTitle: ''
    }
    data = {...this.def};

    async onLoad ({goodsId, mode}) {
      // 新建模式。
      this.input.pid = goodsId ? goodsId : '';
      this.mode = mode;
      this.cates = await goods.getCates();
      this.brands = await goods.getBrands();
      this.suppliers = await goods.getSuppliers();
      this.sizes = await goods.getSizes();
      this.colors = await goods.getColors();

      // 编辑模式。
      if (this.mode == 'edit') {
        let detail = await goods.edit(goodsId);
        // 如果没有结果，跳转至新建商品。
        if (!detail) {
          this.$root.$navigate('edit', {goodsId, mode: 'create'});
        };
        // 处理原始数据。
        let prod = detail.prod.toJSON()
        // 转换 skuList 的值，与原来模板匹配。
        this.skuList = detail.skus.map(item => {
          item = item.toJSON();
          item.color = item.color.name;
          item.size1 = item.size1.name;
          return item
        })
        // pictures 的格式为 [{url: 'xxx'}, {url: 'xxxx'}]
        // TODO: pictures 未做调整顺序处理。
        this.pictures = detail.picUrls.map(item => {
          return {url: item}
        });
        // 处理输入框和选择框。
        this.input.pid = Number(prod.pid);
        this.input.name = prod.name;
        this.input.cate = prod.cate.name;
        this.input.brand = prod.brand.name;
        this.input.supplier = prod.supplier.name;
        this.isSamePrice = prod.isSamePrice;
        this.isOnePrice = prod.isOnePrice;
        this.prod = prod
      }
      Event.listen(Event.GOODS_DETAILS_UPDATE, this.detailsUpdate.bind(this), this);
      // 先 $apply 一次，初始化时不要被 watcher 记录。
      this.$apply()
      // 初始化完成。
      this.init = true
      this.loaded();
    };
    methods = {
      // 提交表单
      async submit() {
        if (!this.validate()) {
          return;
        }
        await Tips.confirm(this.autoTitle, {}, '是否确认新建商品？')
        const data = {
          goodsDetails: [],
          goodsSkuInfo: {},
          goodsStocks: [],
          images: []
        }
        Tips.loading();
        // 处理图片信息
        for (let picture of this.pictures) {
          if (picture.url.startsWith('wxfile')) {
            const avFile = await goods.uploadImage(picture.url, this.autoTitle);
            data.images.push(avFile);
          } else {
            data.images.push(picture);
          }
        }
        // 字段信息
        data.name = this.autoTitle;
        data.feat = this.input.feat;
        data.isSamePrice = this.isSamePrice;
        data.isOnePrice = this.isOnePrice;
        data.pid = Number(this.input.pid);
        data.cate = this.cates.find(item => item.toJSON().name == this.input.cate);
        data.supplier = this.suppliers.find(item => item.toJSON().name == this.input.supplier)
        data.brand = this.brands.find(item => item.toJSON().name == this.input.brand)
        // 处理 SKU。 
        const skuList = this.skuList
        data.skuList = skuList.map(skuItem => {
          const sku = {}
          sku.size1 = this.sizes.find(item => item.toJSON().name == skuItem.size1);
          sku.color = this.colors.find(item => item.toJSON().name == skuItem.color);
          sku.size2 = skuItem.size2;
          // TODO：为每个 price 设置一个 class，然后设置 ACL 权限。
          sku.price1 = Number(skuItem.price1);
          sku.price2 = Number(skuItem.price2);
          sku.price3 = Number(skuItem.price3);
          sku.stock = Number(skuItem.stock);
          sku.soldOut = skuItem.soldOut;
          sku.name = [skuItem.color, skuItem.size1].join('-')
          sku.fullName = data.name + ' ' + sku.name
          return sku
        })
        if (this.mode == 'create') {
          await goods.create(data);
          await Tips.success('商品新增成功！', 800);
        } else {
          // await goods.update(this.input.goodsId, data);
          await Tips.success('更新功能未完善！请稍后再试...', 800);
        }
        Event.emit(Event.GOODS_LIST_UPDATE);
        wepy.navigateBack();
      },
      // 新增内页选项
      async addInner(clsName, e) {
        let newInnerId = e.currentTarget.id
        const name = this.input.newInner;
        try {
          await goods.addInner(name, clsName);
        } catch(err) {
          console.log(err)
        } finally {
          this[newInnerId] = await goods.getInner(clsName);
          console.log(this[newInnerId])
          // TODO: 新增选项后，如果出错，未能清空输入框。
          this.input.newInner = '';
          this.loaded();
        }
      },
      // 选择内页选项
      selectInner() {
        this.isCateDisplay = 'false';
        this.isBrandDisplay = 'false';
        this.isSupplierDisplay = 'false';
        this.isSizeDisplay = 'false';
        this.isColorDisplay = 'false';
        this.input.newInner = ''
      },
      // 展现内页选项
      showInner(e) {
        let innerId = e.currentTarget.id
        console.log(innerId)
        this[innerId] = 'true';
      },
      // 跳转到详情页面
      details() {
        const param = {
          details: JSON.stringify(this.details)
        }

        this.$navigate('detail', param);
      },
      // 所有 SKU 同价。
      samePrice(e) {
        this.isSamePrice = e.detail.value
      },
      // 一口价。
      onePrice(e) {
        this.isOnePrice = e.detail.value
      },
      // 扫码功能。
      async scanCode() {
        let res = await wepy.scanCode();
        let goodsId = res.result;
        this.init = false;
        this.$root.$navigate('edit', {goodsId, mode: 'edit'});
      }
    };
    // 商品详情更新
    detailsUpdate(details) {
      this.details = details;
    }
    // 检验
    validate() {
      const picturesNum = this.pictures.length;
      const pidNum = this.input.pid.length;
      let price1s = this.skuList.map(sku => sku.price1)
      let price2s = this.skuList.map(sku => sku.price2)
      let price3s = this.skuList.map(sku => sku.price3)
      const prices = [...price1s, ...price2s, ...price3s]
      let size1s = this.skuList.map(sku => sku.size1)
      let size2s = this.skuList.map(sku => sku.size2)
      let colors = this.skuList.map(sku => sku.color)
      const stocks = this.skuList.map(sku => sku.stock);
      let rules = [
        {
          value: picturesNum,
          method: 'min',
          param: 1,
          message: '请上传商品图片'
        },
        {
          value: pidNum,
          method: 'min',
          param: 7,
          message: '商品编码必须要7位数字'
        },
        {
          value: this.autoTitle,
          method: 'required',
          message: '请输入商品标题'
        },
        {
          value: this.autoTitle,
          method: 'minlength',
          param: '2',
          message: '商品标题太短'
        },
        {
          value: prices,
          method: 'required',
          message: '商品价格不能为空'
        },
        {
          value: prices,
          method: 'number',
          message: '商品价格必须为数字'
        },
        {
          value: prices,
          method: 'min',
          param: 0.01,
          message: '商品价格不能为0或负数'
        },
        {
          value: prices,
          method: 'max',
          param: 1000000,
          message: '商品价格过高'
        },
        {
          value: stocks,
          method: 'required',
          message: '商品库存不能为空'
        },
        {
          value: stocks,
          method: 'digits',
          message: '商品库存必须为整数'
        },
        {
          value: stocks,
          method: 'min',
          param: 0,
          message: '商品库存不能为负数'
        },
        {
          value: stocks,
          method: 'max',
          param: 1000000,
          message: '商品库存过高'
        },
        {
          value: size2s,
          method: 'maxlength',
          param: 6,
          message: '自定义规格不能大于6个字符'
        },
        {
          value: size1s,
          method: 'required',
          message: '请选择规格尺码'
        },
        {
          value: colors,
          method: 'required',
          message: '请选择规格颜色'
        }
      ];
      const skuNames = this.skuList.map(item => item.color + item.size1);
      if (skuNames.length > 1) {
        rules = rules.concat([
          {
            value: skuNames,
            method: 'noDuplicate',
            message: '型号名称不能重复'
          }
        ]);
      }
      return this.check(rules);
    }

    computed = {
      detailText() {
        const size = this.details.length;
        return size > 0 ? `已保存${size}条详情` : '请点击编辑详情';
      },
      autoTitle() {
        return `<${this.input.pid}> ${this.input.brand} ${this.input.feat}${this.input.cate}`
      }
    };

    watch = {
      input() {
        // 新建模式及未完成初始化时，不需要观察。
        if (!this.init || this.mode === 'create') {
          return
        } else {
          console.log('Data changed.')
        }
      }
    }

    events = {
      // 打开 SKU 的内页选择框，尺码和颜色。
      getInner(innerId, info, e) {
        this.editingInfo = info
        this[innerId] = 'true';
      }
    };
    components = {
      Tips: FormTips,
      ActionBar: ActionBar,
      SkuList: SkuList,
      ImageUploader: ImageUploader,
      SliderPanelCate: SliderPanel,
      SliderPanelBrand: SliderPanel,
      SliderPanelSupplier: SliderPanel,
      SliderPanelSize: SliderPanel,
      SliderPanelColor: SliderPanel
    };
    mixins = [base, input];
    config = {
      navigationBarTitleText: '编辑商品'
    };
  }
</script>
<style lang="scss">
  @import "../../styles/variable";

  .detail-box{
    border-top: $border;
  }
  .flex-color{
    display: flex;
  }
  .flex-color-name{
    flex: 2;
    color: grey;
  }
  .flex-color-sample{
    flex: 9;
    text-align: center;
  }
</style>
