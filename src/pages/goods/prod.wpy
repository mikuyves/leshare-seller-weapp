<template>
  <view class="page">

    <view class="doc-title">
      {{prod.name}}
      <view class="zan-label zan-label--small">{{prod.pid}}</view>
    </view>

    <view class="prod-image">
      <image style="width: 100%; background-color: #eeeeee;" mode="aspectFit" src="{{showUrl}}" />
    </view>

    <view class="flex-wrap">
      <view wx:for="{{picUrls}}" wx:key="item">
        <view @tap="changePic({{item}})">
          <image mode="aspectFit" src="{{item}}"/>
        </view>
      </view>
    </view>

    <!-- SKU 列表 -->
    <view class="zan-panel">
      <view wx:for="{{skuList}}" wx:for-item="sku" wx:key="name" class="zan-cell zan-cell--last-child">
        <!-- 有赞 label 遇上 wx:for 需要放在 block 里面？否则会换行。 -->
        <block>
          <view class="zan-label" style="background-color: {{sku.color.nameEn}};"></view>
          <view class="zan-label">{{sku.name}}</view>
          <view class="zan-label">现货： {{sku.stock}} 件</view>


          <view class="zan-label" 
          :class="{zan-label--primary: showPriceId === 'price1',zan-label--hb: showPriceId === 'price2'}" @tap="seeDiffPrice({{showPriceId}})">
          ￥{{sku[showPriceId]}} 元
          </view>

          <view class="zan-label" @tap="addReminder({{sku}})">+</view>

          <view class="zan-label zan-label--primary zan-label--small" wx:if="{{sku.soldOut}}">已断货</view>

        </block>
      </view>
    </view>

    <view class="zan-c-gray-darker zan-pull-right">现货总库存：{{totalStock}} 件</view>

    <view class="item-box" wx:if="{{remimders.length > 0}}">

      <view class="doc-title">
        选购清单
        <view class="zan-pull-right">
          <view @tap="clearReminders" class="zan-label zan-label--small">清空</view>
        </view>
      </view>

      <view class="desc-box row-between" style="margin: 20px">
        <text class="muted">规格</text>
        <text class="muted ml20">价格</text>
        <text class="muted ml20">数量</text>
      </view>

      <view class="desc-box row-between" style="margin-left: 20px; margin-right: 20px" wx:for="{{remimders}}" wx:key="name">
        <text class="muted">{{item.sku.name}}</text>
        <text class="muted ml20">￥ {{item.sku[showPriceId]}}元</text>
        <text class="muted ml20">{{item.qtt}} 件</text>
      </view>

      <view class="desc-box row-between" style="margin: 20px">
        <text class="muted">总计</text>
        <text class="muted ml20">￥ {{totalPrice}} 元</text>
        <text class="muted ml20">{{totalQtt}} 件</text>
      </view>

      <view class="weui-cell"  id="isCustomerDisplay" @tap="showInner">
        <view class="weui-cell__hd">
          <view class="weui-label">选择客户</view>
        </view>
        <view class="weui-cell__hd" style="margin-right: 15rpx;">
          <image style="width: 50rpx; height: 50rpx" class="weui-cell__hd" src="{{customer.avatarUrl ? customer.avatarUrl : ''}}" />
        </view>
        <view class="weui-cell__bd" style="color: {{customer ? 'default' : 'grey'}};" >
          {{customer ? (customer.nickName ? customer.nickName : '未注册') : '未选择'}}
        </view>
        <view class="weui-cell__ft weui-cell__ft_in-access"></view>
      </view>
      <!--操作栏-->
      <ActionBar @tap.user="saveReminders" okText="写入清单" cancelText="返回" />
      
    </view>

  </view>

  <!-- 客户列表 -->
  <SliderPanelCustomer :display.sync="isCustomerDisplay" btn='false'>
    <view slot="title">客户列表</view>
    <view slot="content" class="weui-cells-form">
      <!-- 注意这里 selectInner 是否需要修改 -->
      <radio-group id="customerId" key="" @change="radio" @tap="selectInner">
        <label class="weui-cell weui-check__label" wx:for="{{customers}}" wx:key="value">
          <radio class="weui-check" value="{{item.objectId}}" checked="{{input.customerId == item.objectId}}"/>

          <!-- 勾选符号 -->
          <view class="weui-cell__hd weui-cell__hd_in-radio" wx:if="{{input.customerId == item.objectId}}">
            <icon class="weui-icon-radio" type="success_no_circle" size="16"></icon>
          </view>

          <!-- 用户信息 -->
          <view class="weui-cell__hd" style="margin-right: 15rpx;">
            <image style="width: 60rpx; height: 60rpx" class="weui-cell__hd" src="{{item.avatarUrl ? item.avatarUrl : '/images/icons/empty.png'}}" />
          </view>
          <view class="weui-cell__bd">{{item.nickName ? item.nickName : '未授权'}}</view>
          <view class="weui-cell__bd">{{item.username.length === 25 ? '未注册' : item.username}}</view>
          <view class="weui-cell__ft">{{item.mobilePhoneNumber ? item.mobilePhoneNumber : "未注册手机"  }}</view>

        </label>
      </radio-group>
    </view>
  </SliderPanelCustomer>
</template>

<script>
  import wepy from 'wepy';
  import base from '../../mixins/base';
  import input from '../../mixins/input';
  import goods from '../../api/goods';
  import auth from '../../api/auth';
  import Event from '../../utils/Event';
  import zanQuantity from '../../components/zanui/zan-quantity'
  import SliderPanel from '../../components/common/slider_panel';
  import ActionBar from '../../components/common/action_bar';
  import Tips from '../../utils/Tips';

  export default class GoodsList extends wepy.page {
    def = {
        goodsId: '',
        prod: {},
        skuList: [],
        remimders: [],
        showUrl: '',
        picUrls: [],
        input: {
          customerId: ''
        },
        inputColor: '',
        inputSize1: '',
        showStock: 10,
        minStock: 0,
        maxStock: 100,
        totalStock: 0,
        showPriceId: 'price2',
        isCustomerDisplay: false,
        customers: [],
        customer: null,
        totalPrice: 0,
        totalQtt: 0
    }
    data = {...this.def};
    async onLoad ({goodsId}) {
      this.goodsId = goodsId;
      let prod = await goods.getProdWithDetail(goodsId);
      let skus = await goods.getSkuListFromProd(prod);
      let picUrls = await goods.getProdPics(prod);
      this.prod = prod.toJSON();
      this.skuList = skus.map(item => item.toJSON());
      this.picUrls = picUrls;
      this.showUrl = this.prod.mainPic.url;
      // Event.listen(Event.GOODS_LIST_UPDATE, this.update.bind(this), this);
      this.$apply();
    }

    methods = {
      changePic(item) {
        // 触发时间 target 会返回 id，tagName 和 dataset。其中 dataset 可以自定义数据。
        this.showUrl = item;
      },
      changeColor(colorName) {
        if (colorName == this.inputColor) {
          this.inputColor = ''
        } else {
          this.inputColor = colorName;
        }
      },
      changeSize(sizeName) {
        if (sizeName == this.inputSize1) {
          this.inputSize1 = ''
        } else {
          this.inputSize1 = sizeName;
        }
      },
      seeDiffPrice(showPriceId) {
        if (showPriceId === 'price2') {
          this.showPriceId = 'price3';
        } else if (showPriceId === 'price3'){
          this.showPriceId = 'price1';
        } else {
          this.showPriceId = 'price2';
        }
      },
      // 选择内页选项
      selectInner() {
        this.isCustomerDisplay = 'false';
      },
      // 展现内页选项
      async showInner(e) {
        let innerId = e.currentTarget.id
        this[innerId] = 'true';
        let customers = await auth.getUsers();
        this.customers = customers.map(item => item.toFullJSON());
        this.$apply()
      },
      /**
       * 下单临时记录清单
       */
      addReminder(sku) {
        let reminder = {sku};
        reminder.qtt = 1
        let foundItem = this.remimders.find(item => item.sku.name === sku.name)
        if (foundItem) {
          // 断货时，最大值是现货存量。
          if (foundItem.sku.soldOut && foundItem.qtt === foundItem.sku.stock) {
            console.log('This product is sold out.')
            return
          } else {
            foundItem.qtt ++;
          }
        } else {
          this.remimders = [...this.remimders, reminder];
        }
      },
      // 清空清单内容
      clearReminders() {
        // TODO: 未能清空已选择的客户。
        this.remimders = [];
        this.input.customerId = '';
        this.customer = {};
      },
      // 写入清单
      async saveReminders() {
        let text = `${this.customer.nickName} 选购 ${this.prod.name} ${this.totalQtt} 件`
        await Tips.confirm(text, {}, '加入购物清单？')
        this.remimders = this.remimders.map(item => {
          item.price = item.sku[this.showPriceId]
          return item
        })
        Tips.loading();
        let res = await goods.saveReminders(this.remimders, this.customer)
        await Tips.success('已经加入客户购物清单！', 800);
        wepy.navigateBack();
      }
    }

    events = {}

    watch = {
      // inputColor() {
      //   this.skuList = this.skuList.map(item => {
      //     if (item.color.name === this.inputColor) {
      //       item.color.cssPrimary = 'zan-label--primary'
      //     } else {
      //       item.color.cssPrimary = ''
      //     }
      //   })
      // }
    }

    computed = {
      // // 注意顺序问题，很重要！
      // skuName() {
      //   if (this.inputColor === '' && this.inputSize1 === '') {
      //     return ''
      //   };
      //   let skuName = this.inputColor + '-' + this.inputSize1;
      //   let res = this.skuList.find(item => item.name === skuName);
      //   if (res) {
      //     return skuName;
      //   } else {
      //     return ''
      //   }
      // },
      // 现货总量
      totalStock() {
        let skuStocks = this.skuList.map(item => item.stock);
        if (skuStocks.length > 0) {
          return skuStocks.reduce((total, num) => total + num);
        }
      },
      // 选中的客户。
      customer() {
        // 用户未能清空问题，出在直接 return find 的结果，如果是 undefined，
        // 则会把 data 中的 customer 删除，这会造成选择结果中在显示上次的结果。
        // 按道理，整个 customer 被删除，应该读取不了任何数据，但是模板居然还是
        // 保留了上次的数据，未知道是什么原因造成的。如果返回一个空对象 {} 也可以，
        // 但会造成模板条件判断复杂，因为 {} ? true : false 返回 true。
        // 解决方案是 return null。
        if (!this.customers && this.input.cunstomerId) {
          return
        }
        let customer = this.customers.find(item => item.objectId === this.input.customerId)
        return customer ? customer : null
      },
      // 清单总量
      totalQtt() {
        if (this.remimders.length < 1) {
          return
        }
        let tq = this.remimders.reduce((total, item) => total + item.qtt, 0)
        return tq
      },
      // 清单总价
      totalPrice() {
        if (this.remimders.length < 1) {
          return
        }
        let tp = this.remimders.reduce((total, item) => total + item.sku[this.showPriceId] * item.qtt, 0)
        return tp
      }
      // showStock() {
      //   if (this.inputColor === '' || this.inputSize1 === '') {
      //     return 0
      //   }
      //   let sku = this.skuList.find(item => item.name === this.skuName)
      //   if (sku) {
      //     return sku.stock
      //   } else {
      //     return 0
      //   }
      // }
    }

    events = {};
    components = {
      zanQuantity: zanQuantity,
      ActionBar: ActionBar,
      SliderPanelCustomer: SliderPanel,
    }
    mixins = [base, input];
    config = {
      navigationBarTitleText: '商品详情',
      enablePullDownRefresh: true
    };
  }
</script>

<style lang="scss">
  @import "../../styles/variable";
  @import "../../styles/zanui/index.wxss";

  .container {
    background: #F9F9F9;
    overflow: hidden;
    min-height: 100vh;
    box-sizing: border-box;
  }

  .container::before {
    position: fixed;
    top: 0;
    left: 0;
    content: ' ';
    width: 100%;
    height: 1rpx;
    background-color: #e2e2e2;
    z-index: 5;
  }

  .doc-title {
    font-size: 25px;
    line-height: 25px;
    color: #666;
    padding: 15px 0;
    margin: 20px;
    border-bottom: 1rpx solid #e5e5e5;
  }
  .prod-title {
    margin-top: 20rpx;
    margin-bottom: 20rpx;
  }
  .flex-wrap {
      display: -webkit-flex;
  }
  .flex-wrap image {
      width: 80rpx;
      height: 80rpx;
      margin: 30rpx;
  }
  .item-box{
    background-color: #FFF;
    margin-top: 60rpx;
    position: relative;

    .item-action{
      border-top: $border;
      height: 90rpx;
      padding-right: 10rpx;
    }

    .goods-box{
      padding: 30rpx 20rpx;

      $image-size: 170rpx;

      .goods-image{
        height: $image-size;
        width: $image-size;
        border: $border;
        border-radius: 8px;
      }
      .icon-recommend{
        position: absolute;
        height: 25px;
        width: 25px;
        right: 10rpx;
        top: 0;
      }

      .price-box{
        align-items: flex-end;
      }

      .desc-box{
        margin-left: 20px;
        margin-right: 20px;
        text {
          font-size: $text-sm;
        }
      }

      .info-box{
        justify-content: space-between;
        height: $image-size;
        flex: 1;
        margin-left: 20rpx;

        .title{
          line-height: 30rpx;
        }
      }
    }
  }

</style>
