<template>
  <!--SKU区域// 组件化-->
  <repeat for="{{skuList}}" key="sku" index="index" item="item">
    <Sku :info.sync="item" index.sync="index" :skuEditable.sync="skuEditable" @remove.user="remove" @change.user="change" />
  </repeat>

  <!--添加商品型号-->
  <view class="sku-add-btn row-end" @tap="add">
    <image class="icon" src="/images/icons/plus.png"></image><text class="ml10">更多规格</text>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Sku from './sku';
  export default class SkuList extends wepy.component {
    props = {
      skuList: {
        twoWay: true
      },
      retailPrice: Number,
      isSamePrice: Boolean,
      isOnePrice: Boolean
    };
    data = {
      skuEditable: true
    };
    components = {
      Sku: Sku
    };
    methods = {
      add() {
        this.skuList.push({
          // 由于父组件内的选择弹框，存在选择同上次相同的选项时，没有触发 change 事件。
          // 只能在这里新建一个 sku 时，复制上次的选项，修复这个 bug 。
          // 有待改善。
          size1: this.skuList[this.skuList.length - 1].size1,
          color: this.skuList[this.skuList.length - 1].color,
          stock: null,
          isSoldOut: false,
        });
      },
      remove(index, skuId) {
        this.skuList.splice(index, 1);
        this.$emit('deleteSku', skuId)
      },
      change(info) {
        this.skuList[info.index][info.fieldName] = info.fieldValue;
      }
    };
    watch = {
      skuList() {
        this.resetSkuEditable();
        this.keepSamePrice();
        this.keepOnePrice();
        this.$apply();
      },
      retailPrice() {
        this.keepSamePrice();
        this.keepOnePrice();
        this.$apply();
      },
      isSamePrice() {
        this.keepSamePrice();
        this.$apply();
      },
      isOnePrice() {
        this.keepOnePrice();
        this.$apply();
      }
    }
    resetSkuEditable() {
      this.skuEditable = this.skuList.length > 1;
    }
    keepSamePrice() {
      let retailPrice = Number(this.retailPrice)
      if (this.skuList.length >= 1 && this.isSamePrice) {
        for (let sku of this.skuList) {
          sku.price1 = retailPrice ? Math.round(retailPrice * 0.035) * 10 : '';
          sku.price2 = retailPrice ? Math.round(retailPrice * 0.05) * 10 : '';
          sku.price3 = retailPrice ? Math.round(retailPrice * 0.06) * 10 : '';
          sku.price4 = retailPrice ? retailPrice : '';
        };
      };
    }
    keepOnePrice() {
      let retailPrice = Number(this.retailPrice)
      if (this.isOnePrice) {
        for (let sku of this.skuList) {
          sku.price1 = retailPrice ? retailPrice : '';
          sku.price2 = retailPrice ? retailPrice : '';
          sku.price3 = retailPrice ? retailPrice : '';
          sku.price4 = retailPrice ? retailPrice : '';
        }
      }
    }
    clearData() {
      this.skuList = [{
        size1: '',
        size2: '',
        color: '',
        price1: null,
        price2: null,
        price3: null,
        stock: null,
        isSoldOut: false
      }];
      this.$apply();
    }
    events = {};
    onLoad() {
      this.resetSkuEditable();
      this.clearData();
    }
  }
</script>

<style lang="scss">
  @import "../../styles/variable";
  .sku-add-btn{
    padding: 10px 20px;
  }

</style>
